<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration  scan="true" scanPeriod="10 seconds">

    <contextName>logback</contextName>

    <define name="logFile" class="com.coderman.log.LogFileDir"/>
    <conversionRule conversionWord="logOwner" converterClass="com.coderman.log.LogOwner"/>

    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量-->
    <property name="log.file" value="${logFile}" />



    <!--输出到控制台-->
    <appender name="LOG_CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>[%-5p]%n%logOwner%d{ISO8601}%n{}StackTrace: %replace(%caller{1}){'Caller.{1}0\t at', 'at'}**************************%n%m%n**************************%n%n</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!--输出到文件-->
    <appender name="LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.file}/AllLog</file>
        <encoder>
            <pattern>[%-5p]%n%logOwner%d{ISO8601}%n{}StackTrace: %replace(%caller{1}){'Caller.{1}0\t at', ''}**************************%n%m%n**************************%n%n</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.file}/AllLog.%d{yyyyMMdd}</fileNamePattern>
        </rollingPolicy>
    </appender>


    <!-- dev环境打印控制台 -->
    <springProfile name="dev">
        <root level="info">
            <appender-ref ref="LOG_CONSOLE" />
            <appender-ref ref="LOG_FILE" />
        </root>

        <logger name="java.sql.Connection" level="DEBUG" additivity="false"/>
        <logger name="java.sql.Statement" level="DEBUG" additivity="false"/>
        <logger name="com.coderman" level="INFO" additivity="true"/>
    </springProfile>


    <!-- fat环境输出到文件 -->
    <springProfile name="fat">
        <root level="info">
            <appender-ref ref="LOG_FILE" />
        </root>

        <logger name="java.sql.Connection" level="INFO" additivity="false"/>
        <logger name="java.sql.Statement" level="INFO" additivity="false"/>
        <logger name="com.coderman" level="INFO" additivity="true"/>
    </springProfile>



    <!-- uat环境输出到文件 -->
    <springProfile name="uat">
        <root level="info">
            <appender-ref ref="LOG_FILE" />
        </root>

        <logger name="java.sql.Connection" level="INFO" additivity="false"/>
        <logger name="java.sql.Statement" level="INFO" additivity="false"/>
        <logger name="com.coderman" level="INFO" additivity="true"/>
    </springProfile>



    <!-- pro环境输出到文件 -->
    <springProfile name="uat">
        <root level="info">
            <appender-ref ref="LOG_FILE" />
        </root>

        <logger name="java.sql.Connection" level="ERROR" additivity="false"/>
        <logger name="java.sql.Statement" level="ERROR" additivity="false"/>
        <logger name="com.coderman" level="ERROR" additivity="true"/>
    </springProfile>


</configuration>
